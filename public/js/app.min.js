"use strict";

/**
 * Gets the attribute of the alement that matches the selector
 * 
 * @param {*} attr 
 * @param {*} el 
 */
var getAttr = function getAttr(attr, el) {
  return el.getAttrribute(attr);
};

/**
 * Set the attribute of the element
 * 
 * @param {*} attr 
 * @param {*} el 
 * @param {*} value 
 */
var setAttr = function setAttr(attr, el, value) {
  el.setAttribute(attr, value);
};

/**
 * Removes attribute of the element
 * 
 * @param {*} attr 
 * @param {*} el 
 */
var removeAttr = function removeAttr(attr, el) {
  el.removeAttribute(attr);
};
"use strict";

/*
 * Classie
 * --------------------------------------------------------------
 * Class helper functions. Why use? For pretty and readable code.
 * 
 * Usage:
 * ------
 * 
 * addClass(elem, 'my-new-class')
 * removeClass(elem, 'my-unwanted-class')
 * hasClass(elem, 'my-class') -> true/false
 * toggleClass(elem, 'my-class')
 */

var addClass = function addClass(elem, c) {
    elem.classList.add(c);
};

var removeClass = function removeClass(elem, c) {
    elem.classList.remove(c);
};

var hasClass = function hasClass(elem, c) {
    return elem.classList.contains(c);
};

var toggleClass = function toggleClass(elem, c) {
    var fn = hasClass(elem, c) ? removeClass : addClass;
    fn(elem, c);
};
"use strict";

/**
 * Returning i alone means that it is available outside of the function if needed
 *  
 * @param {*} array 
 * @param {*} func 
 */
var each = function each(array, func) {
    for (var i = 0; i < array.length; i++) {
        func(array[i], i);
    }
};
"use strict";

/**
 * Finds all elements on page that match the selector
 * Returns a nodelist array
 * 
 * @param {*} selector 
 * @param {*} context 
 */
var findAll = function findAll(selector) {
  var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;

  return context.querySelectorAll(selector);
};
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Tabs = function () {
    function Tabs(options) {
        _classCallCheck(this, Tabs);

        this.bodySelector = 'js-tabs';

        this.navLinks = null;
        this.contentContainer = null;
        this.activeIndex = 0;
        this.initCalled = false;
        this.options = options;

        if (!this.initCalled && hasClass(document.getElementsByTagName('body')[0], this.bodySelector)) {
            this.init();
        }
    }

    _createClass(Tabs, [{
        key: 'init',
        value: function init() {
            this.el = document.querySelector(this.options.el);

            if (this.el !== null && typeof this.el !== 'undefined') {
                this.navLinks = this.el.querySelectorAll(this.options.navLinks);
                this.contentContainer = this.el.querySelectorAll(this.options.contentContainer);

                this.initCalled = true;

                for (var i = 0; i < this.navLinks.length; i++) {
                    var link = this.navLinks[i];

                    this.handleClick(link, i);
                }

                if (window.location.hash && this.options.hash) {
                    var hash = window.location.hash.substring(1);

                    for (var _i = 0; _i < this.navLinks.length; _i++) {
                        if (this.navLinks[_i].dataset.hash === hash) {
                            this.goToTab(_i);
                        }
                    }
                }
            }
        }
    }, {
        key: 'handleClick',
        value: function handleClick(link, index) {
            var $this = this;

            link.addEventListener('click', function (e) {
                e.preventDefault();

                $this.goToTab(index);
            });
        }
    }, {
        key: 'goToTab',
        value: function goToTab(index) {
            if (index !== this.activeIndex && index >= 0 && index <= this.navLinks.length) {
                removeClass(this.navLinks[this.activeIndex], 'is-active');
                addClass(this.navLinks[index], 'is-active');
                removeClass(this.contentContainer[this.activeIndex], 'is-active');
                addClass(this.contentContainer[index], 'is-active');

                if (this.options.hash) {
                    window.location.hash = this.navLinks[index].dataset.hash;
                }

                this.activeIndex = index;
            }
        }
    }]);

    return Tabs;
}();
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Modal = function () {
    function Modal() {
        _classCallCheck(this, Modal);

        this.selectors = {
            body: 'js-modal',
            open: 'modal__open',
            close: 'modal__close',
            overlay: 'modal__overlay'
        };
        this.modal = null;

        if (hasClass(document.getElementsByTagName('body')[0], this.selectors.body)) {
            this.open();
        }
    }

    _createClass(Modal, [{
        key: 'open',
        value: function open() {
            var _this = this;

            document.addEventListener('click', function (e) {
                e.preventDefault();

                if (hasClass(e.target, _this.selectors.open)) {
                    _this.modal = document.querySelector('[data-modal=\'' + e.target.id + '\']');

                    addClass(_this.modal, 'active');

                    _this.close();
                }
            });
        }
    }, {
        key: 'close',
        value: function close() {
            var _this2 = this;

            document.addEventListener('click', function (e) {
                e.preventDefault();

                if (hasClass(e.target, _this2.selectors.close) || hasClass(e.target, _this2.selectors.overlay)) {
                    removeClass(_this2.modal, 'active');
                }
            });
        }
    }]);

    return Modal;
}();
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Hamburger = function () {
    function Hamburger() {
        _classCallCheck(this, Hamburger);

        this.bodySelector = 'js-hamburger';

        this.hamburger = null;
        this.list = null;
        this.open = false;

        if (hasClass(document.getElementsByTagName('body')[0], this.bodySelector)) {
            this.hamburger = document.getElementsByClassName('hamburger')[0];
            this.list = document.getElementsByClassName('hamburger__list')[0];

            this.handleToggle();
        }
    }

    _createClass(Hamburger, [{
        key: 'handleToggle',
        value: function handleToggle() {
            var _this = this;

            this.hamburger.addEventListener('click', function (e) {
                e.preventDefault();

                toggleClass(_this.list, 'active');
                toggleClass(_this.hamburger, 'active');
            });
        }
    }]);

    return Hamburger;
}();
'use strict';

new Tabs({
    el: '.tabs',
    navLinks: '.tabs__link',
    contentContainer: '.tabs__content'
    //hash: true
});

new Hamburger();

new Modal();